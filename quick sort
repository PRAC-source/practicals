import time
import random

def quick_sort_deterministic(arr, low, high):
    if low < high:
        pi = partition(arr, low, high)
        quick_sort_deterministic(arr, low, pi - 1)
        quick_sort_deterministic(arr, pi + 1, high)

def quick_sort_randomized(arr, low, high):
    if low < high:
        random_index = random.randint(low, high)
        arr[low], arr[random_index] = arr[random_index], arr[low]
        pi = partition(arr, low, high)
        quick_sort_randomized(arr, low, pi - 1)
        quick_sort_randomized(arr, pi + 1, high)

def partition(arr, low, high):
    pivot = arr[high]
    i = low - 1
    for j in range(low, high):
        if arr[j] <= pivot:
            i += 1
            arr[i], arr[j] = arr[j], arr[i]
    arr[i + 1], arr[high] = arr[high], arr[i + 1]
    return i + 1

def analyze_sorting_algorithm(sort_function, arr):
    start_time = time.time()
    sort_function(arr, 0, len(arr) - 1)
    end_time = time.time()
    return end_time - start_time

def generate_random_array(size):
    return [i for i in range(size, 0, -1)]

if __name__ == "__main__":
    array_size = int(input("Enter the size of the array: "))
    
    arr = generate_random_array(array_size)
    
    arr_deterministic = arr.copy()
    arr_randomized = arr.copy()
    
    print("Analyzing deterministic Quick Sort...")
    deterministic_time = analyze_sorting_algorithm(quick_sort_deterministic, arr_deterministic)
    
    print("Analyzing randomized Quick Sort...")
    randomized_time = analyze_sorting_algorithm(quick_sort_randomized, arr_randomized)
    
    print(f"Deterministic Quick Sort Time: {deterministic_time:.6f} seconds")
    print(f"Randomized Quick Sort Time: {randomized_time:.6f} seconds")
